{"ast":null,"code":"import { io } from 'socket.io-client';\nimport { API_URL } from '../config/api';\nlet socket;\nlet reconnectTimer;\nexport const initSocket = token => {\n  if (!token) {\n    console.error(\"‚ùå WebSocket Init Error: No token provided\");\n    return;\n  }\n  if (socket) {\n    socket.disconnect();\n  }\n  console.log(\"üîå Connecting to WebSocket with token:\", token);\n  socket = io(API_URL, {\n    auth: {\n      token\n    },\n    reconnection: true,\n    reconnectionAttempts: 5,\n    reconnectionDelay: 1000,\n    reconnectionDelayMax: 5000,\n    timeout: 20000\n  });\n  socket.on('connect', () => {\n    console.log(`‚úÖ Connected to WebSocket server: ${socket.id}`);\n    if (reconnectTimer) {\n      clearTimeout(reconnectTimer);\n      reconnectTimer = null;\n    }\n  });\n  socket.on('connect_error', error => {\n    console.error(\"‚ùå WebSocket Connection Error:\", error.message);\n    if (!reconnectTimer) {\n      reconnectTimer = setTimeout(() => {\n        console.log(\"üîÑ Attempting to reconnect...\");\n        initSocket(token);\n      }, 5000);\n    }\n  });\n  socket.on('reconnect', attempt => {\n    console.log(`üîÑ Reconnected on attempt: ${attempt}`);\n  });\n  socket.on('reconnect_error', error => {\n    console.error(\"‚ùå WebSocket Reconnection Error:\", error.message);\n  });\n  socket.on('reconnect_failed', () => {\n    console.error(\"‚ùå WebSocket Reconnection Failed\");\n  });\n\n  // ‚úÖ Listen for a test event from the backend\n  socket.on(\"testEvent\", data => {\n    console.log(\"üì• Received test event:\", data);\n  });\n  return socket;\n};\nexport const getSocket = () => {\n  if (!socket) {\n    throw new Error(\"‚ùå Socket not initialized\");\n  }\n  return socket;\n};","map":{"version":3,"names":["io","API_URL","socket","reconnectTimer","initSocket","token","console","error","disconnect","log","auth","reconnection","reconnectionAttempts","reconnectionDelay","reconnectionDelayMax","timeout","on","id","clearTimeout","message","setTimeout","attempt","data","getSocket","Error"],"sources":["C:/Users/VIVTUS/WebstormProjects/nodjsProjet/task-client/src/services/socketService.js"],"sourcesContent":["import { io } from 'socket.io-client';\r\nimport { API_URL } from '../config/api';\r\n\r\nlet socket;\r\nlet reconnectTimer;\r\n\r\nexport const initSocket = (token) => {\r\n    if (!token) {\r\n        console.error(\"‚ùå WebSocket Init Error: No token provided\");\r\n        return;\r\n    }\r\n\r\n    if (socket) {\r\n        socket.disconnect();\r\n    }\r\n\r\n    console.log(\"üîå Connecting to WebSocket with token:\", token);\r\n\r\n    socket = io(API_URL, {\r\n        auth: { token },\r\n        reconnection: true,\r\n        reconnectionAttempts: 5,\r\n        reconnectionDelay: 1000,\r\n        reconnectionDelayMax: 5000,\r\n        timeout: 20000,\r\n    });\r\n\r\n    socket.on('connect', () => {\r\n        console.log(`‚úÖ Connected to WebSocket server: ${socket.id}`);\r\n        if (reconnectTimer) {\r\n            clearTimeout(reconnectTimer);\r\n            reconnectTimer = null;\r\n        }\r\n    });\r\n\r\n    socket.on('connect_error', (error) => {\r\n        console.error(\"‚ùå WebSocket Connection Error:\", error.message);\r\n        if (!reconnectTimer) {\r\n            reconnectTimer = setTimeout(() => {\r\n                console.log(\"üîÑ Attempting to reconnect...\");\r\n                initSocket(token);\r\n            }, 5000);\r\n        }\r\n    });\r\n\r\n    socket.on('reconnect', (attempt) => {\r\n        console.log(`üîÑ Reconnected on attempt: ${attempt}`);\r\n    });\r\n\r\n    socket.on('reconnect_error', (error) => {\r\n        console.error(\"‚ùå WebSocket Reconnection Error:\", error.message);\r\n    });\r\n\r\n    socket.on('reconnect_failed', () => {\r\n        console.error(\"‚ùå WebSocket Reconnection Failed\");\r\n    });\r\n\r\n    // ‚úÖ Listen for a test event from the backend\r\n    socket.on(\"testEvent\", (data) => {\r\n        console.log(\"üì• Received test event:\", data);\r\n    });\r\n\r\n    return socket;\r\n};\r\n\r\nexport const getSocket = () => {\r\n    if (!socket) {\r\n        throw new Error(\"‚ùå Socket not initialized\");\r\n    }\r\n    return socket;\r\n};\r\n"],"mappings":"AAAA,SAASA,EAAE,QAAQ,kBAAkB;AACrC,SAASC,OAAO,QAAQ,eAAe;AAEvC,IAAIC,MAAM;AACV,IAAIC,cAAc;AAElB,OAAO,MAAMC,UAAU,GAAIC,KAAK,IAAK;EACjC,IAAI,CAACA,KAAK,EAAE;IACRC,OAAO,CAACC,KAAK,CAAC,2CAA2C,CAAC;IAC1D;EACJ;EAEA,IAAIL,MAAM,EAAE;IACRA,MAAM,CAACM,UAAU,CAAC,CAAC;EACvB;EAEAF,OAAO,CAACG,GAAG,CAAC,wCAAwC,EAAEJ,KAAK,CAAC;EAE5DH,MAAM,GAAGF,EAAE,CAACC,OAAO,EAAE;IACjBS,IAAI,EAAE;MAAEL;IAAM,CAAC;IACfM,YAAY,EAAE,IAAI;IAClBC,oBAAoB,EAAE,CAAC;IACvBC,iBAAiB,EAAE,IAAI;IACvBC,oBAAoB,EAAE,IAAI;IAC1BC,OAAO,EAAE;EACb,CAAC,CAAC;EAEFb,MAAM,CAACc,EAAE,CAAC,SAAS,EAAE,MAAM;IACvBV,OAAO,CAACG,GAAG,CAAC,oCAAoCP,MAAM,CAACe,EAAE,EAAE,CAAC;IAC5D,IAAId,cAAc,EAAE;MAChBe,YAAY,CAACf,cAAc,CAAC;MAC5BA,cAAc,GAAG,IAAI;IACzB;EACJ,CAAC,CAAC;EAEFD,MAAM,CAACc,EAAE,CAAC,eAAe,EAAGT,KAAK,IAAK;IAClCD,OAAO,CAACC,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAACY,OAAO,CAAC;IAC7D,IAAI,CAAChB,cAAc,EAAE;MACjBA,cAAc,GAAGiB,UAAU,CAAC,MAAM;QAC9Bd,OAAO,CAACG,GAAG,CAAC,+BAA+B,CAAC;QAC5CL,UAAU,CAACC,KAAK,CAAC;MACrB,CAAC,EAAE,IAAI,CAAC;IACZ;EACJ,CAAC,CAAC;EAEFH,MAAM,CAACc,EAAE,CAAC,WAAW,EAAGK,OAAO,IAAK;IAChCf,OAAO,CAACG,GAAG,CAAC,8BAA8BY,OAAO,EAAE,CAAC;EACxD,CAAC,CAAC;EAEFnB,MAAM,CAACc,EAAE,CAAC,iBAAiB,EAAGT,KAAK,IAAK;IACpCD,OAAO,CAACC,KAAK,CAAC,iCAAiC,EAAEA,KAAK,CAACY,OAAO,CAAC;EACnE,CAAC,CAAC;EAEFjB,MAAM,CAACc,EAAE,CAAC,kBAAkB,EAAE,MAAM;IAChCV,OAAO,CAACC,KAAK,CAAC,iCAAiC,CAAC;EACpD,CAAC,CAAC;;EAEF;EACAL,MAAM,CAACc,EAAE,CAAC,WAAW,EAAGM,IAAI,IAAK;IAC7BhB,OAAO,CAACG,GAAG,CAAC,yBAAyB,EAAEa,IAAI,CAAC;EAChD,CAAC,CAAC;EAEF,OAAOpB,MAAM;AACjB,CAAC;AAED,OAAO,MAAMqB,SAAS,GAAGA,CAAA,KAAM;EAC3B,IAAI,CAACrB,MAAM,EAAE;IACT,MAAM,IAAIsB,KAAK,CAAC,0BAA0B,CAAC;EAC/C;EACA,OAAOtB,MAAM;AACjB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}